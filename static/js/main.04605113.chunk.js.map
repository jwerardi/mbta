{"version":3,"sources":["Container.js","library/hooks.js","library/themes.js","library/ReactTable.js","DepartureTable.js","DepartureBoard.js","App.js","reportWebVitals.js","index.js"],"names":["Container","props","ThemeProvider","CSSReset","Box","d","alignItems","justifyContent","marginTop","children","useFetch","url","options","useState","isLoading","setIsLoading","data","setData","error","setError","checkStatus","response","status","json","Error","statusText","useEffect","a","fetch","fetchData","boardTheme","bg","color","border","borderColor","tableCellTheme","margin","padding","borderRight","borderBottom","maxWidth","Table","columns","defaultSortBy","customTableHeader","defaultFilters","useTable","initialState","sortBy","filters","disableSortRemove","useFilters","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","flexDirection","w","Text","p","length","FormControl","marginBottom","FormLabel","htmlFor","Input","id","type","defaultValue","onChange","e","target","value","Number","Select","width","map","as","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","canFilter","isSorted","isSortedDesc","Icon","style","name","row","i","getRowProps","cells","cell","getCellProps","Button","onClick","disabled","ReactTable","defaultProps","SelectColumnFilter","filterValue","setFilter","preFilteredRows","React","useMemo","Set","forEach","add","values","undefined","option","PastDepartureFilter","Checkbox","checked","DepartureTable","upcomingDepartures","departureColumns","Header","accessor","Filter","filter","rows","columnIds","now","Date","item","compareAsc","original","time","sortType","rowA","rowB","disableFilters","marginLeft","fontSize","format","textAlign","dateFormatString","DepartureBoard","routeQueryString","method","setUpcomingDepartures","PredictedTime","predictedTime","originalTime","getScheduleStatus","timeISO","parseISO","timeCompare","timeDelta","formatDistance","formattedTime","included","reduce","acc","curr","predictions","prediction","routes","route","stops","stop","trips","trip","predictionID","routeID","stopID","tripID","relationships","find","predictedArrival","attributes","arrival_time","formattedArrivalTime","arrivalTime","arrivalStatus","predictedDeparture","departure_time","formattedDepartureTime","departureTime","processData","toString","App","setRouteQueryString","document","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.04605113.chunk.js","sourcesContent":["/*\n* Container component for departure board webapp\n* Contains Chakras-UI provided CSS reset and Chakras theme provider\n*\n*/\nimport React from 'react';\nimport {ThemeProvider, CSSReset, Box} from '@chakra-ui/core'\n\nconst Container = props => {\n  return <ThemeProvider>\n    <CSSReset/>\n    <Box\n      d='flex'\n      alignItems='center'\n      justifyContent='center'\n      marginTop='20px'\n    >\n      {props.children}\n    </Box>\n  </ThemeProvider>\n};\n\nexport default Container;\n","import {useEffect, useState} from 'react';\n\nexport const useFetch = (url, options) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(false);\n\n  const checkStatus = response => {\n    if (response.status >= 200 && response.status < 300) {\n      return response.json()\n    } else {\n      throw new Error(response.statusText);\n    }\n  };\n\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url, options);\n        const json = await checkStatus(response);\n        setData(json);\n      } catch (err) {\n        setError(err)\n      } finally {\n        setIsLoading(false)\n      }\n    };\n\n    fetchData();\n\n  }, []);\n  return {isLoading, data, error};\n\n};","export const boardTheme = {\n  bg: 'black',\n  color: 'gold',\n  border: '1px',\n  borderColor: 'gold',\n};","/*\n* Light implementation of a re-usable Table component powered by react-table\n*   https://www.npmjs.com/package/react-table\n* Most of this code an amalgamation of example code from the official react-table documentation\n*   https://react-table.tanstack.com/docs/overview\n* I've customized some of the style and rendering logic to fit the DepartureBoard theme\n*\n*/\n\nimport React from 'react'\nimport {useTable, usePagination, useSortBy, useFilters} from 'react-table'\nimport PropTypes from 'prop-types';\nimport {Icon, Select, Box, Button, Text, Input, FormControl, FormLabel} from \"@chakra-ui/core\";\nimport {boardTheme} from \"./themes\";\n\nconst tableCellTheme = {\n  margin: 0,\n  padding: '0.5rem',\n  borderRight: '1px',\n  borderBottom: '1px',\n  borderColor: 'gold',\n  maxWidth: '200px',\n};\n\n\nfunction Table({columns, data, defaultSortBy, customTableHeader, defaultFilters}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {pageIndex, pageSize},\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: {\n        sortBy: [defaultSortBy],\n        filters: [defaultFilters]\n      },\n      disableSortRemove: true, // makes it so you cannot \"unsort\" a column if no other column is sorted\n    },\n    useFilters,\n    useSortBy,\n    usePagination,\n  );\n  return (\n    <>\n      <Box\n        d='flex'\n        justifyContent='space-between'\n      >\n        {customTableHeader}\n        <Box\n          d='flex'\n          alignItems='flex-end'\n          flexDirection='column'\n          w='300px'\n        >\n          <Box\n            d='flex'\n            flexDirection='column'\n            alignItems='center'\n            w='100%'\n            {...boardTheme}\n          >\n            <Text p='2'> Page <strong> {pageIndex + 1} of {pageOptions.length} </strong></Text>\n            <FormControl\n              d='flex'\n              alignItems='center'\n              marginBottom='3'\n            >\n              <FormLabel htmlFor=\"paginationInput\">Go to page:</FormLabel>\n              <Input\n                id=\"paginationInput\" {...boardTheme}\n                type='number'\n                w='40px'\n                defaultValue={pageIndex + 1}\n                onChange={e => {\n                  const page = e.target.value ? Number(e.target.value) - 1 : 0\n                  gotoPage(page)\n                }}/>\n            </FormControl>\n          </Box>\n          <Select\n            {...boardTheme}\n            width='100%'\n            value={pageSize}\n            onChange={e => {\n              setPageSize(Number(e.target.value))\n            }}\n          >\n            {[10, 20, 30, 40, 50].map(pageSize => (\n              <option key={pageSize} value={pageSize}>\n                Show {pageSize} results per page\n              </option>\n            ))}\n          </Select>\n        </Box>\n      </Box>\n      <Box\n        as='table'\n        {...boardTheme}\n        w='100%'\n        {...getTableProps()}\n      >\n        <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <Box as='th' {...tableCellTheme} {...column.getHeaderProps()}>\n                <Box\n                  d='flex'\n                  flexDirection='column'\n                  alignItems='center'\n                >\n                  <div {...column.getSortByToggleProps()}>\n                    {column.render('Header')}\n                  </div>\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </Box>\n                {column.isSorted\n                  ? column.isSortedDesc\n                    ? <Icon style={{'float': 'left'}} name='arrow-down'/>\n                    : <Icon style={{'float': 'right'}} name='arrow-up'/>\n                  : null}\n              </Box>\n            ))}\n          </tr>\n        ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n        {page.map((row, i) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return <Box as='td' {...tableCellTheme} {...cell.getCellProps()}>{cell.render('Cell')}</Box>\n              })}\n            </tr>\n          )\n        })}\n        </tbody>\n      </Box>\n      <Box\n        d='flex'\n        w='100%'\n        justifyContent='space-between'\n      >\n        <Button\n          {...boardTheme}\n          width='200px'\n          onClick={() => previousPage()}\n          disabled={!canPreviousPage}\n        >\n          {'Previous Page'}\n        </Button>\n        <Button\n          {...boardTheme}\n          width='200px'\n          onClick={() => nextPage()}\n          disabled={!canNextPage}\n        >\n          {'Next Page'}\n        </Button>\n      </Box>\n    </>\n  )\n}\n\nconst ReactTable = props => {\n  return <Table\n    {...props}\n  />\n};\n\nReactTable.defaultProps = {\n  defaultSortBy: {},\n  data: [],\n  columns: [],\n  customTableHeader: <></>,\n};\n\nReactTable.propTypes = {\n  defaultSortBy: PropTypes.object,\n  data: PropTypes.array,\n  columns: PropTypes.array,\n  customTableHeader: PropTypes.element,\n};\n\nexport default ReactTable;\n","/*\n* Component to house data structures and options relevant to this DepartureTable only\n*\n*/\nimport React, {useMemo} from 'react';\nimport PropTypes from 'prop-types';\nimport {compareAsc, format} from \"date-fns\";\nimport ReactTable from \"./library/ReactTable\";\nimport {boardTheme} from \"./library/themes\";\nimport {Select, Checkbox, Text, Box} from \"@chakra-ui/core\";\n\n// This is a custom filter UI for selecting a unique option from a list\n// Taken from https://react-table.tanstack.com/docs/api/useFilters\nfunction SelectColumnFilter(\n  {\n    column: {filterValue, setFilter, preFilteredRows, id},\n  }) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach(row => {\n      options.add(row.values[id])\n    });\n    return [...options.values()]\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <Select\n      {...boardTheme}\n      value={filterValue}\n      onChange={e => {\n        setFilter(e.target.value || undefined)\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </Select>\n  )\n}\n\nfunction PastDepartureFilter(\n  {\n    column: {filterValue, setFilter},\n  }) {\n  return (\n    <Checkbox\n      onChange={e => setFilter(e.target.checked)}>\n      Show past departures\n    </Checkbox>\n  )\n}\n\nconst DepartureTable = props => {\n  let {\n    upcomingDepartures\n  } = props;\n  const departureColumns = useMemo(() => [ //should memoize column definitions as per react-table's recommendation\n    {\n      Header: 'Train #',\n      accessor: 'trainNumber',\n      Filter: SelectColumnFilter,\n      filter: 'equals',\n    },\n    {\n      Header: 'Stop',\n      accessor: 'stop',\n      Filter: SelectColumnFilter,\n      filter: 'equals',\n    },\n    {\n      Header: 'Route',\n      accessor: 'routeName',\n      Filter: SelectColumnFilter,\n      filter: 'equals',\n    },\n    {\n      Header: 'Time',\n      accessor: 'formattedTime',\n      Filter: PastDepartureFilter,\n      filter: (rows, columnIds, filterValue) => {\n        const now = new Date();\n        // filterValue represents if we want to show \"past\" departures or not\n        // by default, this value is false\n        return filterValue ? rows :\n          rows.filter(item => compareAsc(item.original.time, now) === 1)\n      },\n      sortType: (rowA, rowB) => {\n        return compareAsc(rowA?.original.time, rowB?.original.time);\n      }\n    },\n    {\n      Header: 'Status',\n      accessor: 'status',\n      disableFilters: true,\n    },\n  ], []);\n\n  const now = new Date();\n\n  return <ReactTable\n    customTableHeader={\n      <Box w='100%'>\n        <Text marginLeft=\"0\" fontSize=\"3xl\">{format(now, \"PPPP\")}</Text>\n        <Text marginLeft=\"4\" fontSize=\"2xl\">{format(now, \"p\")}</Text>\n        <Text textAlign='center' fontSize=\"4xl\">MBTA Commuter Rail Departure Board</Text>\n      </Box>\n    }\n    data={upcomingDepartures}\n    defaultSortBy={{\n      id: 'formattedTime',\n    }}\n    defaultFilters={{\n      id: 'formattedTime',\n      value: false,\n    }}\n\n    columns={departureColumns}\n  />\n};\n\nDepartureTable.defaultProps = {\n  upcomingDepartures: [],\n};\n\nDepartureTable.propTypes = {\n  upcomingDepartures: PropTypes.array,\n};\n\nexport default DepartureTable;\n","/*\n* Main component for the MBTA Commuter Rail Departure Board\n* Contains logic to parse MBTA Rest response and build arrays/objects to be used by the rest of the application\n*\n*/\nimport React, {useEffect, useState} from 'react';\nimport {useFetch} from './library/hooks'\nimport PropTypes from 'prop-types';\nimport {format, parseISO, compareAsc, formatDistance} from 'date-fns'\nimport DepartureTable from \"./DepartureTable\";\nimport {Box} from \"@chakra-ui/core\";\n\nconst dateFormatString = 'hh:mm:ss a';\n\nconst DepartureBoard = (props) => {\n  const {isLoading, error, data} = useFetch(\n    `https://api-v3.mbta.com/schedules?filter[route]=${props.routeQueryString}\n    &filter[max_time]=24:00\n    &include=route,trip,stop,prediction`, {\n      method: 'GET',\n    });\n  const [upcomingDepartures, setUpcomingDepartures] = useState([]);\n\n\n  const PredictedTime = ({predictedTime, originalTime}) => {\n    if (predictedTime === originalTime) {\n      return originalTime;\n    }\n    return <details>\n      <summary>{predictedTime}</summary>\n      Original {originalTime}\n    </details>\n  };\n\n  /***\n   * getScheduleStatus is a utility function to process the time a scheduled stop will occur and if present,\n   * any predictions related to that scheduled stop. It will output 3 variables used to demonstrate to the user\n   * the state of their scheduled stop\n   *\n   * @param time - An arrival/destination time. in MBTA API string format\n   * @param predictedTime - If not null, a predicted arrival/destination time change. in MBTA API string format\n   * @returns formattedTime - Within this function, `time` will be compared to `predictedTime`. If the\n   * predicted time is different than the original time, formattedTime will be set to a <details><summary> element\n   * explaining that the scheduled stop will be X minutes early/late. It will also show the originally scheduled time\n   * inside of the details element. If the time is the same, then formattedTime will just be a string.\n   * All timestamps here will be formatted by dateFNS into the format described by dateFormatString\n   * @returns timeISO - the time of the scheduled stop post-processing, in ISO format for quick dateFNS comparison\n   * @returns status - A string representing the status of the scheduled stop. If the scheduled stop is X minutes\n   * early/late, the string will reflect that\n   */\n  const getScheduleStatus = (time, predictedTime) => {\n    if (time) {\n      let status = 'On Time';\n      const timeISO = parseISO(time);\n      if (predictedTime) {\n        const timeCompare = compareAsc(predictedTime, timeISO);\n        const timeDelta = formatDistance(predictedTime, timeISO);\n        if (timeCompare === 1) {\n          status = `Late ${timeDelta}`\n        } else if (timeCompare === -1) {\n          status = `Early ${timeDelta}`\n        }\n        return {\n          timeISO,\n          formattedTime: <PredictedTime\n            predictedTime={format(predictedTime, dateFormatString)}\n            originalTime={format(timeISO, dateFormatString)}\n          />,\n          status\n        }\n      } else {\n        return {\n          timeISO,\n          formattedTime: format(timeISO, dateFormatString),\n          status\n        }\n      }\n    } else {\n      return {\n        timeISO: null,\n        formattedTime: null,\n        status: null,\n\n      }\n    }\n  };\n\n  useEffect(() => {\n    const processData = ({included, data}) => {\n      // first step is to traverse through the 'included' block of JSON from the MBTA API and create some arrays\n      // which will contain all of the predictions, routes, stops, and trips referenced within our schedule data\n      // this is an optimization step; we could traverse through the 'included' block every time we process a schedule\n\n      // curr.type from the MBTA api is singular here, e.g. 'stop', 'prediction', 'route'\n      // in order to reduce and deconstruct here while retaining code readability,\n      // we need to give the singular array names plural aliases\n      const {prediction: predictions, route: routes, stop: stops, trip: trips} = included.reduce((acc, curr) => {\n        return {\n          ...acc,\n          [curr.type]: [...acc[curr.type] || [], curr],\n        }\n      }, {});\n\n      // The following 4 functions are helper functions to traverse through the arrays we created containing the\n      // related items we have been provide from the 'included' section of the MBTA API response\n      const getRoute = (routeID) => routes.find(route => route.id === routeID);\n      const getStop = (stopID) => stops.find(route => route.id === stopID);\n      const getTrip = (tripID) => trips.find(route => route.id === tripID);\n      // the prediction ID can be null, not every schedule has a prediction associated with it\n      // we must check that it exists. if it does not, the function will just return undefined\n      const getPrediction = (predictionID) => predictionID && predictions.find(prediction => prediction.id === predictionID);\n\n\n      return data.map(item => {\n        // safely retrieve related child objects using focused helper functions\n        const prediction = getPrediction(item.relationships.prediction.data?.id);\n        const route = getRoute(item.relationships.route.data.id);\n        const stop = getStop(item.relationships.stop.data.id);\n        const trip = getTrip(item.relationships.trip.data.id);\n\n        const predictedArrival = prediction && parseISO(prediction.attributes?.arrival_time);\n        const {\n          formattedTime: formattedArrivalTime,\n          timeISO: arrivalTime,\n          status: arrivalStatus\n        } = getScheduleStatus(item.attributes?.arrival_time, predictedArrival);\n\n        const predictedDeparture = prediction && parseISO(prediction.attributes?.departure_time);\n        const {\n          formattedTime: formattedDepartureTime,\n          timeISO: departureTime,\n          status: departureStatus\n        } = getScheduleStatus(item.attributes?.departure_time, predictedDeparture);\n\n        // if departureTime/departureStatus are undefined, that means it's the last stop for the train/route\n        let status = departureStatus || <>Last stop: {arrivalStatus}</>;\n        let formattedTime = formattedDepartureTime || <>Last stop: {formattedArrivalTime}</>;\n        let time = departureTime || arrivalTime;\n\n        return {\n          'trainNumber': trip.attributes.name,\n          'stop': stop.attributes.name,\n          'routeName': route.id,\n          formattedTime,\n          status,\n          time,\n          arrivalTime,\n          departureTime,\n        };\n      });\n    };\n\n    if (data) {\n      const upcomingDepartures = processData(data);\n      setUpcomingDepartures(upcomingDepartures);\n    }\n  }, [data]);\n\n\n  return <Box w='80%' color=\"gold\">\n    {isLoading && <div>loading...</div>}\n    {error && <pre>{error.toString()}</pre>}\n    <DepartureTable\n      upcomingDepartures={upcomingDepartures}\n    />\n  </Box>\n};\n\nDepartureBoard.defaultProps = {};\n\nDepartureBoard.propTypes = {\n  routeQueryString: PropTypes.string.isRequired\n};\n\nexport default DepartureBoard;\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Container from \"./Container\";\nimport DepartureBoard from \"./DepartureBoard\";\nimport {useFetch} from \"./library/hooks\";\n\nfunction App() {\n  const {isLoading, error, data} = useFetch('https://api-v3.mbta.com/routes?type=2', { //type 2 is Commuter Rail\n    method: 'GET',\n  });\n  const [routeQueryString, setRouteQueryString] = useState();\n  useEffect(() => {\n    document.title = 'MBTA Commuter Rail Departure Board';\n    // create a string separated by commas containing the ids of all Commuter Rail routes\n    // this will be used later on in a second GET call\n    const routeQueryString = data && data['data'].map(route => {\n      return route['id'];\n    }).toString();\n    setRouteQueryString(routeQueryString)\n  }, [data]);\n  return <Container>\n    {isLoading && <div>loading...</div>}\n    {error && <pre>{error.toString()}</pre>}\n    {routeQueryString &&\n    <DepartureBoard\n      routeQueryString={routeQueryString}\n      isLoading={isLoading}\n      error={error}\n    />\n    }\n  </Container>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}